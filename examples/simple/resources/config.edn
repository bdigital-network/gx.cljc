{:http/options {:port 8080}

 :http/routes ["/users"
               {:get
                ;; existing functions should be referenced with fully
                ;; qualified name
                {:handler app/get-users-handler}}]

 :http/ring-router {;; component is a fully qualified name of defined component
                    :gx/component components/ring-router
                    ;; props of a component
                    :gx/props {:routes (gx/ref :http/routes)}}

 :http/ring-handler {:gx/component components/ring-handler
                     :gx/props {:router (gx/ref :http/ring-router)
                                :database (gx/ref :sqlite/database)
                                :db-ready? (gx/ref :sqlite/db-populator)}}

 :http/server {:gx/component components/http-server
               :gx/props {:handler (gx/ref :http/ring-handler)
                          :options (gx/ref :http/options)}}

 ;; pseudo logger component, logs port by taking it from :http/options
 :app (println "Application starting on port " (get (gx/ref :http/options)
                                                    :port))
 ;; independend component
 :another {:gx/start (println "another starting")
           :gx/stop (println "another stopping")}

 :sqlite/db-spec {:connection-uri "jdbc:sqlite::memory:"}

 :sqlite/database {:gx/component database/sqlite
                   :gx/props (gx/ref :sqlite/db-spec)}

 :sqlite/db-populator {:gx/component database/db-populator
                       :gx/props (gx/ref :sqlite/database)}}
